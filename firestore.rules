/**
 * @file Firestore Security Rules for SynergyFlow ERP System
 *
 * @core_philosophy This ruleset enforces a role-based and user-ownership security model.
 *  User-specific data is secured under `/users/{userId}`, while shared resources utilize membership maps directly on the documents.
 *
 * @data_structure
 *  - User data: /users/{userId}
 *  - User workflows: /users/{userId}/workflows/{workflowId}
 *  - User form definitions: /users/{userId}/formDefinitions/{formDefinitionId}
 *  - Form fields: /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
 *  - Other top-level collections: /appSubmodules, /transactionEntries, /roles, /lookupTables, /misReports, /transactionCodes, /products, /categories, /stocks, /customers, /orders, /invoices, /returns, /suppliers, /purchaseOrders, /goodsReceiptNotes, /payments, /chartOfAccounts, /ledgerEntries.
 *  - Subcollections of orders, returns, purchaseOrders, goodsReceiptNotes
 *
 * @key_security_decisions
 *  - Strict user ownership for data under `/users/{userId}`.
 *  - Read and write access to subcollections secured by verifying ownership of the parent document.
 *  - Data denormalization is used to avoid expensive `get()` calls within rules.
 *  - No client-side listing of users or roles is allowed.
 *
 * @denormalization_for_authorization
 *  - FormFields store workflowId (copied from FormDefinition) for authorization independence.
 *  - OrderLineItems store customerId (copied from Order) for authorization independence.
 *  - ReturnLineItems store customerId (copied from Order via Return) for authorization independence.
 *  - POLineItems store supplierId (copied from PurchaseOrder) for authorization independence.
 *  - GRNLineItems store supplierId (copied from PurchaseOrder via GoodsReceiptNote) for authorization independence.
 *
 * @structural_segregation Public and private resources are stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to app submodules.
     * @path /appSubmodules/{appSubmoduleId}
     * @allow (get, list): if true; // Public read access for all app submodules.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /appSubmodules/{appSubmoduleId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to transaction entries.
     * @path /transactionEntries/{transactionEntryId}
     * @allow (get, list): if true; // Public read access for all transaction entries.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /transactionEntries/{transactionEntryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages user documents. Users can only read/write their own document.
     * @path /users/{userId}
     * @allow (get): if isOwner(userId);
     * @allow (list): if false;
     * @allow (create): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @allow (create): if request.auth.uid == userId;
     * @allow (update): if request.auth.uid == userId;
     * @deny   (create, update, delete): if !isOwner(userId); // Owner-only access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages role documents. No direct client access (read or write) to roles collection.
     * @path /roles/{roleId}
     * @allow (get, list): if false;
     * @allow (create, update, delete): if false;
     * @deny   (create, update, delete): if true;
     * @principle No client-side creation, modification, or listing of roles.
     */
    match /roles/{roleId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages workflows owned by a specific user.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (get, list): if isOwner(userId);
     * @allow (create): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @deny   (create, update, delete): if !isOwner(userId); // Owner-only access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workflows/{workflowId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages workflow steps belonging to a specific workflow owned by a specific user.
     * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @allow (get, list): if isOwner(userId);
     * @allow (create): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @deny   (create, update, delete): if !isOwner(userId); // Owner-only access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages form definitions owned by a specific user.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}
     * @allow (get, list): if isOwner(userId);
     * @allow (create): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @deny   (create, update, delete): if !isOwner(userId); // Owner-only access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages form fields belonging to a specific form definition owned by a specific user.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @allow (get, list): if isOwner(userId);
     * @allow (create): if isOwner(userId);
     * @allow (update): if isExistingOwner(userId);
     * @allow (delete): if isExistingOwner(userId);
     * @deny   (create, update, delete): if !isOwner(userId); // Owner-only access.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
      allow get, list: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows read and write access to lookup tables.
     * @path /lookupTables/{lookupTableId}
     * @allow (get, list): if true; // Public read access for all lookup tables.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /lookupTables/{lookupTableId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to MIS reports.
     * @path /misReports/{misReportId}
     * @allow (get, list): if true; // Public read access for all MIS reports.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /misReports/{misReportId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to transaction codes.
     * @path /transactionCodes/{transactionCodeId}
     * @allow (get, list): if true; // Public read access for all transaction codes.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /transactionCodes/{transactionCodeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to products.
     * @path /products/{productId}
     * @allow (get, list): if true; // Public read access for all products.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list): if true; // Public read access for all categories.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to stocks.
     * @path /stocks/{stockId}
     * @allow (get, list): if true; // Public read access for all stocks.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /stocks/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to customers.
     * @path /customers/{customerId}
     * @allow (get, list): if true; // Public read access for all customers.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to orders.
     * @path /orders/{orderId}
     * @allow (get, list): if true; // Public read access for all orders.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages order line items belonging to a specific order.
     * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
     *  * @allow (get, list): if true; // Public read access.
     * @allow (get): if true; // Public read access for all order line items.
     * @allow (list): if true;
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /orders/{orderId}/orderLineItems/{orderLineItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to invoices.
     * @path /invoices/{invoiceId}
     * @allow (get, list): if true; // Public read access for all invoices.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to returns.
     * @path /returns/{returnId}
     * @allow (get, list): if true; // Public read access for all returns.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /returns/{returnId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages return line items belonging to a specific return.
     * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
     * @allow (get, list): if true; // Public read access.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /returns/{returnId}/returnLineItems/{returnLineItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list): if true; // Public read access for all suppliers.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to purchase orders.
     * @path /purchaseOrders/{purchaseOrderId}
     * @allow (get, list): if true; // Public read access for all purchase orders.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /purchaseOrders/{purchaseOrderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages purchase order line items belonging to a specific purchase order.
     * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
     * @allow (get, list): if true; // Public read access.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to goods receipt notes.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}
     * @allow (get, list): if true; // Public read access for all goods receipt notes.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages goods receipt note line items belonging to a specific goods receipt note.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
     * @allow (get, list): if true; // Public read access.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to payments.
     * @path /payments/{paymentId}
     * @allow (get, list): if true; // Public read access for all payments.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to chart of accounts.
     * @path /chartOfAccounts/{chartOfAccountsId}
     * @allow (get, list): if true; // Public read access for all chart of accounts.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /chartOfAccounts/{chartOfAccountsId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows read and write access to ledger entries.
     * @path /ledgerEntries/{ledgerEntryId}
     * @allow (get, list): if true; // Public read access for all ledger entries.
     * @allow (create): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow (update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny   (create, update, delete): if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (requires schema update).
     */
    match /ledgerEntries/{ledgerEntryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Placeholder for any unhandled paths.  All access is denied.
     * @path /
     * @deny   (get, list, create, update, delete): if true; // Explicitly deny all access.
     * @principle Ensures no accidental open access.
     */
    match /{path=**} {
      allow read: if false;
      allow write: if false;
    }
  }

  /**
   * @description Checks if the request is made by the owner of the document.
   * @param {string} userId - The user ID to compare against the request's auth UID.
   * @return {boolean} - True if the request is made by the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the request is made by the owner of the document and the resource exists.
   * @param {string} userId - The user ID to compare against the request's auth UID.
   * @return {boolean} - True if the request is made by the owner and resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} - True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }
}