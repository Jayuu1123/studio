/**
  * @description This ruleset enforces a strict user-ownership model for user-specific data and employs denormalization to maintain authorization independence, enhancing security and performance.
  * @dataStructure Data is organized hierarchically, with user-specific data nested under `/users/{userId}`. Collaborative access is managed using membership maps on documents.
  * @keySecurityDecisions Public listing is disabled for all collections containing user-specific data. Write access is strictly controlled based on ownership or membership. Denormalization avoids costly `get()` calls.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   /**
    * @description Allows anyone to read the appSubmodules collection, but restricts writes to authenticated users.
    * @path /appSubmodules/{appSubmoduleId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, owner-only writes, authenticated users.
    */
   match /appSubmodules/{appSubmoduleId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
   }
 

   /**
    * @description Allows a user to read and write their own user document.
    * @path /users/{userId}
    * @allow (get, list): if isOwner(userId)
    * @allow (create): if isOwner(userId)
    * @allow (update, delete): if isExistingOwner(userId)
    * @deny (create): if !isOwner(userId)
    * @deny (update, delete): if !isExistingOwner(userId)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId} {
    allow get, list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update, delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows anyone to read the roles collection, but restricts writes.
    * @path /roles/{roleId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /roles/{roleId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for roles collection.
   }
 

   /**
    * @description Allows a user to read and write their own workflows.
    * @path /users/{userId}/workflows/{workflowId}
    * @allow (get, list): if isOwner(userId)
    * @allow (create): if isOwner(userId)
    * @allow (update, delete): if isExistingOwner(userId)
    * @deny (create): if !isOwner(userId)
    * @deny (update, delete): if !isExistingOwner(userId)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/workflows/{workflowId} {
    allow get, list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update, delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows a user to read and write their own workflow steps.
    * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
    * @allow (get, list): if isOwner(userId)
    * @allow (create): if isOwner(userId)
    * @allow (update, delete): if isExistingOwner(userId)
    * @deny (create): if !isOwner(userId)
    * @deny (update, delete): if !isExistingOwner(userId)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
    allow get, list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update, delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows a user to read and write their own form definitions.
    * @path /users/{userId}/formDefinitions/{formDefinitionId}
    * @allow (get, list): if isOwner(userId)
    * @allow (create): if isOwner(userId)
    * @allow (update, delete): if isExistingOwner(userId)
    * @deny (create): if !isOwner(userId)
    * @deny (update, delete): if !isExistingOwner(userId)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/formDefinitions/{formDefinitionId} {
    allow get, list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update, delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows a user to read and write their own form fields.
    * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
    * @allow (get, list): if isOwner(userId)
    * @allow (create): if isOwner(userId)
    * @allow (update, delete): if isExistingOwner(userId)
    * @deny (create): if !isOwner(userId)
    * @deny (update, delete): if !isExistingOwner(userId)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
    allow get, list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update, delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows anyone to read the lookupTables collection, but restricts writes.
    * @path /lookupTables/{lookupTableId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /lookupTables/{lookupTableId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for lookup tables.
   }
 

   /**
    * @description Allows anyone to read the misReports collection, but restricts writes.
    * @path /misReports/{misReportId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /misReports/{misReportId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for misReports.
   }
 

   /**
    * @description Allows anyone to read the transactionCodes collection, but restricts writes.
    * @path /transactionCodes/{transactionCodeId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /transactionCodes/{transactionCodeId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for transactionCodes.
   }
 

   /**
    * @description Allows anyone to read the products collection, but restricts writes.
    * @path /products/{productId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /products/{productId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for products.
   }
 

   /**
    * @description Allows anyone to read the categories collection, but restricts writes.
    * @path /categories/{categoryId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /categories/{categoryId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for categories.
   }
 

   /**
    * @description Allows anyone to read the stocks collection, but restricts writes.
    * @path /stocks/{stockId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /stocks/{stockId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for stocks.
   }
 

   /**
    * @description Allows anyone to read the customers collection, but restricts writes.
    * @path /customers/{customerId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /customers/{customerId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for customers.
   }
 

   /**
    * @description Allows anyone to read the orders collection, but restricts writes.
    * @path /orders/{orderId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /orders/{orderId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for orders.
   }
 

   /**
    * @description Allows anyone to read the orderLineItems subcollection, but restricts writes.
    * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /orders/{orderId}/orderLineItems/{orderLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for orderLineItems.
   }
 

   /**
    * @description Allows anyone to read the invoices collection, but restricts writes.
    * @path /invoices/{invoiceId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /invoices/{invoiceId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for invoices.
   }
 

   /**
    * @description Allows anyone to read the returns collection, but restricts writes.
    * @path /returns/{returnId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /returns/{returnId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for returns.
   }
 

   /**
    * @description Allows anyone to read the returnLineItems subcollection, but restricts writes.
    * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /returns/{returnId}/returnLineItems/{returnLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for returnLineItems.
   }
 

   /**
    * @description Allows anyone to read the suppliers collection, but restricts writes.
    * @path /suppliers/{supplierId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /suppliers/{supplierId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for suppliers.
   }
 

   /**
    * @description Allows anyone to read the purchaseOrders collection, but restricts writes.
    * @path /purchaseOrders/{purchaseOrderId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /purchaseOrders/{purchaseOrderId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for purchaseOrders.
   }
 

   /**
    * @description Allows anyone to read the poLineItems subcollection, but restricts writes.
    * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for poLineItems.
   }
 

   /**
    * @description Allows anyone to read the goodsReceiptNotes collection, but restricts writes.
    * @path /goodsReceiptNotes/{goodsReceiptNoteId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /goodsReceiptNotes/{goodsReceiptNoteId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for goodsReceiptNotes.
   }
 

   /**
    * @description Allows anyone to read the grnLineItems subcollection, but restricts writes.
    * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for grnLineItems.
   }
 

   /**
    * @description Allows anyone to read the payments collection, but restricts writes.
    * @path /payments/{paymentId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /payments/{paymentId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for payments.
   }
 

   /**
    * @description Allows anyone to read the chartOfAccounts collection, but restricts writes.
    * @path /chartOfAccounts/{chartOfAccountsId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /chartOfAccounts/{chartOfAccountsId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for chartOfAccounts.
   }
 

   /**
    * @description Allows anyone to read the ledgerEntries collection, but restricts writes.
    * @path /ledgerEntries/{ledgerEntryId}
    * @allow (get, list): if true
    * @deny (create, update, delete): if false
    * @principle Public read, restricted writes.
    */
   match /ledgerEntries/{ledgerEntryId} {
    allow get, list: if true;
    allow create, update, delete: if false; // TODO: Determine appropriate write conditions for ledgerEntries.
   }
 

   /**
    * @description Denies all access to the root collection.
    * @path /
    * @allow (get, list, create, update, delete): if false
    * @principle Root level access is not allowed.
    */
   match /{path=**} {
    allow get, list, create, update, delete: if false;
   }
 

   function isSignedIn() {
    return request.auth != null;
   }
 

   function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
   }
 

   function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
   }
  }
 }