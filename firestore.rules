/**
 * @fileoverview Firestore Security Rules for SynergyFlow ERP.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control system with path-based ownership for user-specific data. It avoids complex queries in rules by denormalizing authorization data directly onto documents.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Collaborative data uses membership maps on documents.
 * - Global roles are stored in dedicated collections (not implemented in this ruleset).
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Write operations always require authorization checks.
 *
 * Denormalization for Authorization:
 * - Authorization data (e.g., user roles, membership lists) is copied directly onto documents to avoid costly `get()` calls within security rules.
 *
 * Structural Segregation:
 * - Data with different security requirements (e.g., public vs. private reports) is stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read if the collection is intended to be public
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle N/A
     */
    function allowPublicRead() {
        return true;
    }

    /**
     * @description Collection of custom submodules created by users.
     * @path /appSubmodules/{appSubmoduleId}
     * @allow (create) Authenticated user creating a new submodule.
     * @deny (create) Unauthenticated user attempting to create a new submodule.
     * @principle Enforces authentication for creating submodules.
     */
    match /appSubmodules/{appSubmoduleId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Collection of user documents. Stores personal user data. Path-based ownership for private data.
     * @path /users/{userId}
     * @allow (create) Authenticated user creating their own user document.
     * @deny (create) Authenticated user attempting to create a different user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of role documents.  Defines roles within the RBAC system.
     * @path /roles/{roleId}
     * @allow (get, list) Public read access to roles.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /roles/{roleId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of workflows owned by a specific user. Path-based ownership.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (create) Authenticated user creating a workflow under their own user ID.
     * @deny (update) Non-owner attempting to update a workflow.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workflows/{workflowId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of workflow steps belonging to a specific workflow. Path-based ownership.
     * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @allow (create) Authenticated user creating a workflow step under their own user and workflow.
     * @deny (update) Non-owner attempting to update a workflow step.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of form definitions owned by a specific user. Path-based ownership.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}
     * @allow (create) Authenticated user creating a form definition under their own user ID.
     * @deny (update) Non-owner attempting to update a form definition.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of form fields belonging to a specific form definition. Includes denormalized 'workflowId' and potentially other workflow-related attributes from the parent FormDefinition for authorization independence.  Path-based ownership.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @allow (create) Authenticated user creating a form field under their own user and form definition.
     * @deny (update) Non-owner attempting to update a form field.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of lookup tables.
     * @path /lookupTables/{lookupTableId}
     * @allow (get, list) Public read access to lookup tables.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /lookupTables/{lookupTableId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of MIS reports. Includes denormalized 'members' map for authorization independence.
     * @path /misReports/{misReportId}
     * @allow (get, list) Public read access to MIS reports.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /misReports/{misReportId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of transaction codes.
     * @path /transactionCodes/{transactionCodeId}
     * @allow (get, list) Public read access to transaction codes.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /transactionCodes/{transactionCodeId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of product documents.
     * @path /products/{productId}
     * @allow (get, list) Public read access to products.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /products/{productId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of product categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Public read access to categories.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of stock level entries.
     * @path /stocks/{stockId}
     * @allow (get, list) Public read access to stocks.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /stocks/{stockId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of customer documents.
     * @path /customers/{customerId}
     * @allow (get, list) Public read access to customers.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /customers/{customerId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of order documents.
     * @path /orders/{orderId}
     * @allow (get, list) Public read access to orders.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /orders/{orderId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of order line items for a specific order. Includes denormalized 'customerId' from the parent Order for authorization independence.
     * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
     * @allow (get, list) Public read access to order line items.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /orders/{orderId}/orderLineItems/{orderLineItemId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of invoice documents.
     * @path /invoices/{invoiceId}
     * @allow (get, list) Public read access to invoices.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /invoices/{invoiceId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of return documents.
     * @path /returns/{returnId}
     * @allow (get, list) Public read access to returns.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /returns/{returnId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of return line items for a specific return. Includes denormalized 'customerId' from the parent Order (via Return) for authorization independence.
     * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
     * @allow (get, list) Public read access to return line items.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /returns/{returnId}/returnLineItems/{returnLineItemId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Public read access to suppliers.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /suppliers/{supplierId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of purchase order documents.
     * @path /purchaseOrders/{purchaseOrderId}
     * @allow (get, list) Public read access to purchase orders.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /purchaseOrders/{purchaseOrderId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of purchase order line items for a specific purchase order.  Includes denormalized 'supplierId' from the parent PurchaseOrder for authorization independence.
     * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
     * @allow (get, list) Public read access to purchase order line items.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of goods receipt note documents.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}
     * @allow (get, list) Public read access to goods receipt notes.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of goods receipt note line items for a specific goods receipt note. Includes denormalized 'supplierId' from the parent PurchaseOrder (via GoodsReceiptNote) for authorization independence.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
     * @allow (get, list) Public read access to goods receipt note line items.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of payment documents.
     * @path /payments/{paymentId}
     * @allow (get, list) Public read access to payments.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /payments/{paymentId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of chart of accounts entries.
     * @path /chartOfAccounts/{chartOfAccountsId}
     * @allow (get, list) Public read access to chart of accounts entries.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /chartOfAccounts/{chartOfAccountsId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of ledger entries.
     * @path /ledgerEntries/{ledgerEntryId}
     * @allow (get, list) Public read access to ledger entries.
     * @deny (create, update, delete) No public write access.
     * @principle Public read, restricted writes.
     */
    match /ledgerEntries/{ledgerEntryId} {
      allow get, list: if allowPublicRead();
      allow create, update, delete: if false;
    }
  }
}