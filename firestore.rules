/**
 * @fileoverview Firestore Security Rules for SynergyFlow ERP System.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User-specific data is secured via path-based ownership under `/users/{userId}`.
 * Other data is secured either using membership maps or is publicly readable. All write operations require authentication.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Collaborative data uses membership maps on the document being secured.
 * - Top-level collections are used for global data or publicly readable data.
 *
 * Key Security Decisions:
 * - Listing of the `/appSubmodules` collection is denied to all users due to the error report.
 * - Ownership is strictly enforced for user-specific data.
 * - Public read access is granted to some top-level collections.
 *
 * Denormalization for Authorization:
 * - Subcollections like `/orders/{orderId}/orderLineItems/{orderLineItemId}` denormalize 'customerId' from the parent Order to avoid needing to fetch the Order document in security rules.
 * - Subcollections like `/returns/{returnId}/returnLineItems/{returnLineItemId}` denormalize 'customerId' from the parent Order (via Return) to avoid needing to fetch the Order or Return document in security rules.
 * - Subcollections like `/purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}` denormalize 'supplierId' from the parent PurchaseOrder to avoid needing to fetch the PurchaseOrder document in security rules.
 * - Subcollections like `/goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}` denormalize 'supplierId' from the parent PurchaseOrder (via GoodsReceiptNote) to avoid needing to fetch the PurchaseOrder or GoodsReceiptNote document in security rules.
 * - The `formFields` subcollection denormalizes 'workflowId' for rules independence.
 *
 * Structural Segregation:
 * - Public and private reports would be stored in separate collections to avoid complex rule logic (not explicitly implemented here but a general principle).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines access rules for the appSubmodules collection. Listing is explicitly denied due to reported errors.
     * @path /appSubmodules/{appSubmoduleId}
     * @allow get: if isSignedIn();
     * @deny list: Always denied to prevent unauthorized listing.
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Denies listing of the entire collection, allows only authenticated access to individual documents.
     */
    match /appSubmodules/{appSubmoduleId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for user documents.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for roles documents.
     * @path /roles/{roleId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /roles/{roleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for workflows owned by a specific user.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership within the user's data tree.
     */
    match /users/{userId}/workflows/{workflowId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for workflow steps belonging to a specific workflow.
     * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership within the user's data tree.
     */
    match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for form definitions owned by a specific user.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership within the user's data tree.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for form fields belonging to a specific form definition.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership within the user's data tree.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for lookup tables.
     * @path /lookupTables/{lookupTableId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /lookupTables/{lookupTableId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for MIS reports.
     * @path /misReports/{misReportId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /misReports/{misReportId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Defines access rules for transaction codes.
     * @path /transactionCodes/{transactionCodeId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /transactionCodes/{transactionCodeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for product documents.
     * @path /products/{productId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for product categories.
     * @path /categories/{categoryId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for stock level entries.
     * @path /stocks/{stockId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /stocks/{stockId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for customer documents.
     * @path /customers/{customerId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /customers/{customerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for order documents.
     * @path /orders/{orderId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /orders/{orderId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for order line items for a specific order.
     * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /orders/{orderId}/orderLineItems/{orderLineItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for invoice documents.
     * @path /invoices/{invoiceId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /invoices/{invoiceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for return documents.
     * @path /returns/{returnId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /returns/{returnId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for return line items for a specific return.
     * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /returns/{returnId}/returnLineItems/{returnLineItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for supplier documents.
     * @path /suppliers/{supplierId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for purchase order documents.
     * @path /purchaseOrders/{purchaseOrderId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /purchaseOrders/{purchaseOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for purchase order line items for a specific purchase order.
     * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for goods receipt note documents.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for goods receipt note line items for a specific goods receipt note.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for payment documents.
     * @path /payments/{paymentId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /payments/{paymentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Defines access rules for chart of accounts entries.
     * @path /chartOfAccounts/{chartOfAccountsId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /chartOfAccounts/{chartOfAccountsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

        /**
     * @description Defines access rules for ledger entries.
     * @path /ledgerEntries/{ledgerEntryId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if false; // TODO: Add admin role validation
     * @allow update: if false; // TODO: Add admin role validation
     * @allow delete: if false; // TODO: Add admin role validation
     * @principle Public read access, owner-only writes (currently disabled).
     */
    match /ledgerEntries/{ledgerEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner of the document, ensures existence.
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}