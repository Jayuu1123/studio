/**
 * @fileoverview Firestore Security Rules for SynergyFlow ERP.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model with path-based ownership for user-specific data and role-based access control for collaborative data.  Denormalization is used extensively to avoid costly `get()` operations.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Collaborative data utilizes membership maps on documents.
 * - Public data is stored in top-level collections.
 *
 * Key Security Decisions:
 * - Enforce strict ownership for user-specific data.
 * - Implement role-based access control for collaborative data via membership maps.
 * - Segregate public and private data into different collections for simplified rules.
 * - Disallow listing of the `/users` collection for enhanced privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document, based on the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the EXISTING document, based on the provided userId, and that the document exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership and document existence for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Collection of custom submodules created by users.
     * @path /appSubmodules/{appSubmoduleId}
     * @allow (create) User with valid auth creates a new submodule.
     * @deny (create) User without auth attempts to create a submodule.
     * @principle Access to app submodules is open to all signed-in users.
     */
    match /appSubmodules/{appSubmoduleId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // Open reads, no writes.
    }

    /**
     * @description Collection of individual transaction entries for all submodules.
     * @path /transactionEntries/{transactionEntryId}
     * @allow (create) User with valid auth creates a new transaction entry.
     * @deny (create) User without auth attempts to create a transaction entry.
     * @principle Access to transaction entries is open to all signed-in users.
     */
    match /transactionEntries/{transactionEntryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // Open reads, no writes.
    }

    /**
     * @description Collection of user documents. Stores personal user data. Path-based ownership for private data.
     * @path /users/{userId}
     * @allow (create) User with auth creates their own user document.
     * @deny (create) User with auth attempts to create another user's document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of role documents.  Defines roles within the RBAC system.
     * @path /roles/{roleId}
     * @allow (get) Any signed-in user can read a role document.
     * @deny (create) No one can create, update, or delete a role document.
     * @principle Roles are read-only and available to all authenticated users.
     */
    match /roles/{roleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of workflows owned by a specific user. Path-based ownership.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (create) User creates a workflow under their user ID.
     * @deny (create) User attempts to create a workflow under another user ID.
     * @principle Enforces document ownership for workflows.
     */
    match /users/{userId}/workflows/{workflowId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of workflow steps belonging to a specific workflow. Path-based ownership.
     * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @allow (create) User creates a workflow step under their workflow.
     * @deny (create) User attempts to create a workflow step under another user's workflow.
     * @principle Enforces document ownership for workflow steps.
     */
    match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of form definitions owned by a specific user. Path-based ownership.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}
     * @allow (create) User creates a form definition under their user ID.
     * @deny (create) User attempts to create a form definition under another user ID.
     * @principle Enforces document ownership for form definitions.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of form fields belonging to a specific form definition. Includes denormalized 'workflowId' and potentially other workflow-related attributes from the parent FormDefinition for authorization independence.  Path-based ownership.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @allow (create) User creates a form field under their form definition.
     * @deny (create) User attempts to create a form field under another user's form definition.
     * @principle Enforces document ownership for form fields.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection of lookup tables.
     * @path /lookupTables/{lookupTableId}
     * @allow (get) Any signed-in user can read a lookup table.
     * @deny (create) No one can create, update, or delete a lookup table.
     * @principle Lookup tables are read-only and available to all authenticated users.
     */
    match /lookupTables/{lookupTableId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of MIS reports. Includes denormalized 'members' map for authorization independence.
     * @path /misReports/{misReportId}
     * @allow (get) Any signed-in user can read an MIS report.
     * @deny (create) No one can create, update, or delete an MIS report.
     * @principle MIS reports are read-only and available to all authenticated users.
     */
    match /misReports/{misReportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of transaction codes.
     * @path /transactionCodes/{transactionCodeId}
     * @allow (get) Any signed-in user can read a transaction code.
     * @deny (create) No one can create, update, or delete a transaction code.
     * @principle Transaction codes are read-only and available to all authenticated users.
     */
    match /transactionCodes/{transactionCodeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of product documents.
     * @path /products/{productId}
     * @allow (get) Any signed-in user can read a product document.
     * @deny (create) No one can create, update, or delete a product document.
     * @principle Products are read-only and available to all authenticated users.
     */
    match /products/{productId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of product categories.
     * @path /categories/{categoryId}
     * @allow (get) Any signed-in user can read a category document.
     * @deny (create) No one can create, update, or delete a category document.
     * @principle Categories are read-only and available to all authenticated users.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of stock level entries.
     * @path /stocks/{stockId}
     * @allow (get) Any signed-in user can read a stock document.
     * @deny (create) No one can create, update, or delete a stock document.
     * @principle Stocks are read-only and available to all authenticated users.
     */
    match /stocks/{stockId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of customer documents.
     * @path /customers/{customerId}
     * @allow (get) Any signed-in user can read a customer document.
     * @deny (create) No one can create, update, or delete a customer document.
     * @principle Customers are read-only and available to all authenticated users.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of order documents.
     * @path /orders/{orderId}
     * @allow (get) Any signed-in user can read an order document.
     * @deny (create) No one can create, update, or delete an order document.
     * @principle Orders are read-only and available to all authenticated users.
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of order line items for a specific order. Includes denormalized 'customerId' from the parent Order for authorization independence.
     * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
     * @allow (get) Any signed-in user can read an order line item.
     * @deny (create) No one can create, update, or delete an order line item.
     * @principle Order line items are read-only and available to all authenticated users.
     */
    match /orders/{orderId}/orderLineItems/{orderLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of invoice documents.
     * @path /invoices/{invoiceId}
     * @allow (get) Any signed-in user can read an invoice document.
     * @deny (create) No one can create, update, or delete an invoice document.
     * @principle Invoices are read-only and available to all authenticated users.
     */
    match /invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of return documents.
     * @path /returns/{returnId}
     * @allow (get) Any signed-in user can read a return document.
     * @deny (create) No one can create, update, or delete a return document.
     * @principle Returns are read-only and available to all authenticated users.
     */
    match /returns/{returnId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of return line items for a specific return. Includes denormalized 'customerId' from the parent Order (via Return) for authorization independence.
     * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
     * @allow (get) Any signed-in user can read a return line item.
     * @deny (create) No one can create, update, or delete a return line item.
     * @principle Return line items are read-only and available to all authenticated users.
     */
    match /returns/{returnId}/returnLineItems/{returnLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (get) Any signed-in user can read a supplier document.
     * @deny (create) No one can create, update, or delete a supplier document.
     * @principle Suppliers are read-only and available to all authenticated users.
     */
    match /suppliers/{supplierId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of purchase order documents.
     * @path /purchaseOrders/{purchaseOrderId}
     * @allow (get) Any signed-in user can read a purchase order document.
     * @deny (create) No one can create, update, or delete a purchase order document.
     * @principle Purchase orders are read-only and available to all authenticated users.
     */
    match /purchaseOrders/{purchaseOrderId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of purchase order line items for a specific purchase order.  Includes denormalized 'supplierId' from the parent PurchaseOrder for authorization independence.
     * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
     * @allow (get) Any signed-in user can read a purchase order line item.
     * @deny (create) No one can create, update, or delete a purchase order line item.
     * @principle Purchase order line items are read-only and available to all authenticated users.
     */
    match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of goods receipt note documents.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}
     * @allow (get) Any signed-in user can read a goods receipt note document.
     * @deny (create) No one can create, update, or delete a goods receipt note document.
     * @principle Goods receipt notes are read-only and available to all authenticated users.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Subcollection of goods receipt note line items for a specific goods receipt note. Includes denormalized 'supplierId' from the parent PurchaseOrder (via GoodsReceiptNote) for authorization independence.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
     * @allow (get) Any signed-in user can read a goods receipt note line item.
     * @deny (create) No one can create, update, or delete a goods receipt note line item.
     * @principle Goods receipt note line items are read-only and available to all authenticated users.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of payment documents.
     * @path /payments/{paymentId}
     * @allow (get) Any signed-in user can read a payment document.
     * @deny (create) No one can create, update, or delete a payment document.
     * @principle Payments are read-only and available to all authenticated users.
     */
    match /payments/{paymentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Collection of chart of accounts entries.
     * @path /chartOfAccounts/{chartOfAccountsId}
     * @allow (get) Any signed-in user can read a chart of accounts document.
     * @deny (create) No one can create, update, or delete a chart of accounts document.
     * @principle Chart of accounts entries are read-only and available to all authenticated users.
     */
    match /chartOfAccounts/{chartOfAccountsId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

     /**
      * @description Collection of ledger entries.
      * @path /ledgerEntries/{ledgerEntryId}
      * @allow (get) Any signed-in user can read a ledger entry document.
      * @deny (create) No one can create, update, or delete a ledger entry document.
      * @principle Ledger entries are read-only and available to all authenticated users.
      */
    match /ledgerEntries/{ledgerEntryId} {
        allow get, list: if isSignedIn();
        allow create, update, delete: if false;
    }
  }
}