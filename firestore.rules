/**
 * @fileoverview Firestore Security Rules for SynergyFlow ERP System.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control (RBAC) model.
 * User-specific data is secured via path-based ownership, while collaborative
 * data leverages membership maps within documents. Strict authorization checks
 * are enforced for all write operations, and data validation focuses on
 * relational integrity.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Collaborative documents use membership maps (e.g., `members: { userId: role }`).
 * - Top-level collections are generally secured using owner-only write access.
 * - Subcollections inherit authorization context from their parent documents.
 *
 * Key Security Decisions:
 * - Data required for authorization is denormalized to avoid costly `get()` calls.
 * - All write operations are explicitly authorized using helper functions.
 * - List operations are secured based on path-based ownership or membership maps.
 *
 * Denormalization for Authorization:
 * - /orders/{orderId}/orderLineItems/{orderLineItemId} includes denormalized 'customerId' from the parent Order.
 * - /returns/{returnId}/returnLineItems/{returnLineItemId} includes denormalized 'customerId' from the parent Order (via Return).
 * - /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} includes denormalized 'supplierId' from the parent PurchaseOrder.
 * - /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} includes denormalized 'supplierId' from the parent PurchaseOrder (via GoodsReceiptNote).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows an authenticated user to manage their own app submodules.
     * @path /appSubmodules/{appSubmoduleId}
     * @allow (create) User 'user123' can create a new appSubmodule.
     * @deny (create) User 'user456' cannot create an appSubmodule.
     * @principle Enforces ownership for writes, preventing unauthorized data modification.
     */
    match /appSubmodules/{appSubmoduleId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access and restricts modification of transaction entries.
     * @path /transactionEntries/{transactionEntryId}
     * @allow (get) Authenticated user can read any transaction entry.
     * @deny (create) Any user cannot create transaction entry.
     * @principle Restricts write access to transaction entries.
     */
    match /transactionEntries/{transactionEntryId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own user document.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their own user document.
     * @deny (create) User 'user456' cannot create user document.
     * @principle Enforces path-based ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated access to roles.
     * @path /roles/{roleId}
     * @allow (get) Authenticated user can read role with ID 'role123'.
     * @deny (create) Any user cannot create roles.
     * @principle Restricts write access to role documents.
     */
    match /roles/{roleId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own workflows.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (create) User 'user123' can create a new workflow.
     * @deny (create) User 'user456' cannot create workflow.
     * @principle Enforces path-based ownership for workflows.
     */
    match /users/{userId}/workflows/{workflowId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own workflow steps.
     * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @allow (create) User 'user123' can create a new workflow step.
     * @deny (create) User 'user456' cannot create workflow step.
     * @principle Enforces path-based ownership for workflow steps.
     */
    match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own form definitions.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}
     * @allow (create) User 'user123' can create a new form definition.
     * @deny (create) User 'user456' cannot create form definition.
     * @principle Enforces path-based ownership for form definitions.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own form fields.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @allow (create) User 'user123' can create a new form field.
     * @deny (create) User 'user456' cannot create form field.
     * @principle Enforces path-based ownership for form fields.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated access to lookup tables.
     * @path /lookupTables/{lookupTableId}
     * @allow (get) Authenticated user can read lookup table with ID 'lookup123'.
     * @deny (create) Any user cannot create lookup tables.
     * @principle Restricts write access to lookup tables.
     */
    match /lookupTables/{lookupTableId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to MIS reports.
     * @path /misReports/{misReportId}
     * @allow (get) Authenticated user can read MIS report with ID 'report123'.
     * @deny (create) Any user cannot create MIS reports.
     * @principle Restricts write access to MIS reports.
     */
    match /misReports/{misReportId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to transaction codes.
     * @path /transactionCodes/{transactionCodeId}
     * @allow (get) Authenticated user can read transaction code with ID 'code123'.
     * @deny (create) Any user cannot create transaction codes.
     * @principle Restricts write access to transaction codes.
     */
    match /transactionCodes/{transactionCodeId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to products.
     * @path /products/{productId}
     * @allow (get) Authenticated user can read product with ID 'prod123'.
     * @deny (create) Any user cannot create products.
     * @principle Restricts write access to product documents.
     */
    match /products/{productId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to categories.
     * @path /categories/{categoryId}
     * @allow (get) Authenticated user can read category with ID 'cat123'.
     * @deny (create) Any user cannot create categories.
     * @principle Restricts write access to category documents.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to stock entries.
     * @path /stocks/{stockId}
     * @allow (get) Authenticated user can read stock entry with ID 'stock123'.
     * @deny (create) Any user cannot create stock entries.
     * @principle Restricts write access to stock entries.
     */
    match /stocks/{stockId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to customers.
     * @path /customers/{customerId}
     * @allow (get) Authenticated user can read customer with ID 'cust123'.
     * @deny (create) Any user cannot create customers.
     * @principle Restricts write access to customer documents.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to orders.
     * @path /orders/{orderId}
     * @allow (get) Authenticated user can read order with ID 'order123'.
     * @deny (create) Any user cannot create orders.
     * @principle Restricts write access to order documents.
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to order line items.
     * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
     * @allow (get) Authenticated user can read order line item with ID 'item123'.
     * @deny (create) Any user cannot create order line items.
     * @principle Restricts write access to order line items.
     */
    match /orders/{orderId}/orderLineItems/{orderLineItemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to invoices.
     * @path /invoices/{invoiceId}
     * @allow (get) Authenticated user can read invoice with ID 'invoice123'.
     * @deny (create) Any user cannot create invoices.
     * @principle Restricts write access to invoice documents.
     */
    match /invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to returns.
     * @path /returns/{returnId}
     * @allow (get) Authenticated user can read return with ID 'return123'.
     * @deny (create) Any user cannot create returns.
     * @principle Restricts write access to return documents.
     */
    match /returns/{returnId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to return line items.
     * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
     * @allow (get) Authenticated user can read return line item with ID 'item123'.
     * @deny (create) Any user cannot create return line items.
     * @principle Restricts write access to return line items.
     */
    match /returns/{returnId}/returnLineItems/{returnLineItemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get) Authenticated user can read supplier with ID 'supplier123'.
     * @deny (create) Any user cannot create suppliers.
     * @principle Restricts write access to supplier documents.
     */
    match /suppliers/{supplierId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to purchase orders.
     * @path /purchaseOrders/{purchaseOrderId}
     * @allow (get) Authenticated user can read purchase order with ID 'po123'.
     * @deny (create) Any user cannot create purchase orders.
     * @principle Restricts write access to purchase order documents.
     */
    match /purchaseOrders/{purchaseOrderId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to purchase order line items.
     * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
     * @allow (get) Authenticated user can read purchase order line item with ID 'item123'.
     * @deny (create) Any user cannot create purchase order line items.
     * @principle Restricts write access to purchase order line items.
     */
    match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to goods receipt notes.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}
     * @allow (get) Authenticated user can read goods receipt note with ID 'grn123'.
     * @deny (create) Any user cannot create goods receipt notes.
     * @principle Restricts write access to goods receipt note documents.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to goods receipt note line items.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
     * @allow (get) Authenticated user can read goods receipt note line item with ID 'item123'.
     * @deny (create) Any user cannot create goods receipt note line items.
     * @principle Restricts write access to goods receipt note line items.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to payments.
     * @path /payments/{paymentId}
     * @allow (get) Authenticated user can read payment with ID 'payment123'.
     * @deny (create) Any user cannot create payments.
     * @principle Restricts write access to payment documents.
     */
    match /payments/{paymentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to chart of accounts entries.
     * @path /chartOfAccounts/{chartOfAccountsId}
     * @allow (get) Authenticated user can read chart of accounts entry with ID 'coa123'.
     * @deny (create) Any user cannot create chart of accounts entries.
     * @principle Restricts write access to chart of accounts entries.
     */
    match /chartOfAccounts/{chartOfAccountsId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows authenticated access to ledger entries.
     * @path /ledgerEntries/{ledgerEntryId}
     * @allow (get) Authenticated user can read ledger entry with ID 'ledger123'.
     * @deny (create) Any user cannot create ledger entries.
     * @principle Restricts write access to ledger entries.
     */
    match /ledgerEntries/{ledgerEntryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}