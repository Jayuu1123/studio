/**
  * @description This ruleset enforces a strict user-ownership model for user-specific data and employs denormalization to avoid costly `get()` calls.
  * All write operations are protected by authorization checks to prevent unauthorized data modification.
  *
  * @dataStructure
  * - User-specific data is nested under `/users/{userId}`.
  * - Collaborative data is secured using membership maps within the documents themselves.
  * - Top-level collections are generally readable by all but require ownership validation for write operations.
  *
  * @keySecurityDecisions
  * - User listing is generally disallowed to prevent information disclosure.
  * - Read-only collections (if any) are explicitly marked and allowed for public read access.
  * - Default security posture for ambiguous relationships is strict owner-only access.
  *
  * @denormalizationForAuthorization
  * - Authorization data (e.g., user IDs, roles) is copied directly onto documents to avoid `get()` calls in security rules.
  * - Subcollections inherit authorization context from their parent documents by denormalizing relevant fields.
  *
  * @structuralSegregation
  * - Private and public data are stored in separate collections to simplify security rules and improve performance.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   function isSignedIn() {
    return request.auth != null;
   }
 

   function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
   }
 

   function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
   }
 

   /**
    * @description Allows anyone to read custom submodules, but only authenticated users can create, update, or delete them.
    * @path /appSubmodules/{appSubmoduleId}
    * @allow (get, list)
    * @allow (create) if request.auth != null
    * @deny (create) if request.auth == null
    * @deny (update, delete)
    * @principle Allows public read access but restricts write access to authenticated users.
    */
   match /appSubmodules/{appSubmoduleId} {
    allow get, list: if true;
    allow create: if isSignedIn();
    allow update, delete: if false;
   }
 

   /**
    * @description Enforces strict ownership for user documents. Only the authenticated user can read, create, update, or delete their own document.
    * @path /users/{userId}
    * @allow (get, create, update, delete) if request.auth.uid == userId
    * @deny (list)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId} {
    allow get: if isOwner(userId);
    allow list: if false;
    allow create: if isOwner(userId);
    allow update: if isExistingOwner(userId);
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows anyone to read roles, but restricts creation, updating, and deletion.
    * @path /roles/{roleId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to roles to prevent unauthorized modification.
    */
   match /roles/{roleId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Enforces strict ownership for workflows within a user's document. Only the authenticated user can read, create, update, or delete their own workflows.
    * @path /users/{userId}/workflows/{workflowId}
    * @allow (get, create, update, delete) if request.auth.uid == userId
    * @deny (list)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/workflows/{workflowId} {
    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update: if isExistingOwner(userId);
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Enforces strict ownership for workflow steps within a user's workflow. Only the authenticated user can read, create, update, or delete their own workflow steps.
    * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
    * @allow (get, create, update, delete) if request.auth.uid == userId
    * @deny (list)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update: if isExistingOwner(userId);
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Enforces strict ownership for form definitions within a user's document. Only the authenticated user can read, create, update, or delete their own form definitions.
    * @path /users/{userId}/formDefinitions/{formDefinitionId}
    * @allow (get, create, update, delete) if request.auth.uid == userId
    * @deny (list)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/formDefinitions/{formDefinitionId} {
    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update: if isExistingOwner(userId);
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Enforces strict ownership for form fields within a user's form definition. Only the authenticated user can read, create, update, or delete their own form fields.
    * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
    * @allow (get, create, update, delete) if request.auth.uid == userId
    * @deny (list)
    * @principle Enforces document ownership for all operations.
    */
   match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
    allow get: if isOwner(userId);
    allow list: if isOwner(userId);
    allow create: if isOwner(userId);
    allow update: if isExistingOwner(userId);
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows anyone to read lookup tables, but restricts creation, updating, and deletion.
    * @path /lookupTables/{lookupTableId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to lookup tables to prevent unauthorized modification.
    */
   match /lookupTables/{lookupTableId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read MIS reports, but restricts creation, updating, and deletion.
    * @path /misReports/{misReportId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to MIS reports to prevent unauthorized modification.
    */
   match /misReports/{misReportId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read transaction codes, but restricts creation, updating, and deletion.
    * @path /transactionCodes/{transactionCodeId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to transaction codes to prevent unauthorized modification.
    */
   match /transactionCodes/{transactionCodeId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read products, but restricts creation, updating, and deletion.
    * @path /products/{productId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to products to prevent unauthorized modification.
    */
   match /products/{productId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read categories, but restricts creation, updating, and deletion.
    * @path /categories/{categoryId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to categories to prevent unauthorized modification.
    */
   match /categories/{categoryId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read stock levels, but restricts creation, updating, and deletion.
    * @path /stocks/{stockId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to stock levels to prevent unauthorized modification.
    */
   match /stocks/{stockId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read customers, but restricts creation, updating, and deletion.
    * @path /customers/{customerId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to customers to prevent unauthorized modification.
    */
   match /customers/{customerId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read orders, but restricts creation, updating, and deletion.
    * @path /orders/{orderId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to orders to prevent unauthorized modification.
    */
   match /orders/{orderId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read order line items, but restricts creation, updating, and deletion.
    * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to order line items to prevent unauthorized modification.
    */
   match /orders/{orderId}/orderLineItems/{orderLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read invoices, but restricts creation, updating, and deletion.
    * @path /invoices/{invoiceId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to invoices to prevent unauthorized modification.
    */
   match /invoices/{invoiceId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read returns, but restricts creation, updating, and deletion.
    * @path /returns/{returnId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to returns to prevent unauthorized modification.
    */
   match /returns/{returnId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read return line items, but restricts creation, updating, and deletion.
    * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to return line items to prevent unauthorized modification.
    */
   match /returns/{returnId}/returnLineItems/{returnLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read suppliers, but restricts creation, updating, and deletion.
    * @path /suppliers/{supplierId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to suppliers to prevent unauthorized modification.
    */
   match /suppliers/{supplierId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read purchase orders, but restricts creation, updating, and deletion.
    * @path /purchaseOrders/{purchaseOrderId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to purchase orders to prevent unauthorized modification.
    */
   match /purchaseOrders/{purchaseOrderId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read purchase order line items, but restricts creation, updating, and deletion.
    * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to purchase order line items to prevent unauthorized modification.
    */
   match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read goods receipt notes, but restricts creation, updating, and deletion.
    * @path /goodsReceiptNotes/{goodsReceiptNoteId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to goods receipt notes to prevent unauthorized modification.
    */
   match /goodsReceiptNotes/{goodsReceiptNoteId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read goods receipt note line items, but restricts creation, updating, and deletion.
    * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to goods receipt note line items to prevent unauthorized modification.
    */
   match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read payments, but restricts creation, updating, and deletion.
    * @path /payments/{paymentId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to payments to prevent unauthorized modification.
    */
   match /payments/{paymentId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read chart of accounts entries, but restricts creation, updating, and deletion.
    * @path /chartOfAccounts/{chartOfAccountsId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to chart of accounts entries to prevent unauthorized modification.
    */
   match /chartOfAccounts/{chartOfAccountsId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
 

   /**
    * @description Allows anyone to read ledger entries, but restricts creation, updating, and deletion.
    * @path /ledgerEntries/{ledgerEntryId}
    * @allow (get, list)
    * @deny (create, update, delete)
    * @principle Restricts write access to ledger entries to prevent unauthorized modification.
    */
   match /ledgerEntries/{ledgerEntryId} {
    allow get, list: if true;
    allow create, update, delete: if false;
   }
  }
 }