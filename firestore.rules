/**
 * @fileoverview Firestore Security Rules for SynergyFlow ERP.
 *
 * Core Philosophy: This ruleset enforces a strict, role-based access control (RBAC) model combined with user-ownership where applicable.
 *   It prioritizes security and debuggability by minimizing external reads and maximizing clarity.
 * Data Structure:
 *   - User-specific data is nested under `/users/{userId}`.
 *   - Global data, like roles, and lookup tables, resides in top-level collections.
 *   - Subcollections inherit the ownership and access control of their parent documents.
 * Key Security Decisions:
 *   - User listing is generally disallowed to prevent enumeration.
 *   - Data validation is relaxed (prototyping mode) to focus on authorization.
 *   - All write operations require authentication.
 *   - Data required for authorization is denormalized onto secured documents to minimize `get()` calls.
 * Denormalization for Authorization:
 *   - Many subcollections denormalize authorization data from parent documents to avoid costly `get()` calls in rules. For example, `OrderLineItem` denormalizes `customerId` from `Order`.
 * Structural Segregation:
 *   - Data with differing privacy requirements is stored in separate collections to simplify rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows the user to create their own user document.
     * @path /users/{userId}
     * @allow (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating /users/S1ykKeLbzZMIbc7FFphZVisaXVA2
     * @deny (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating /users/otherUserId
     * @principle Allows self-creation of user documents.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages custom submodules created by users.
     * @path /appSubmodules/{appSubmoduleId}
     * @allow (create) - Any authenticated user creating an appSubmodule.
     * @deny (create) - Unauthenticated user attempting to create appSubmodule.
     * @principle Authenticated users can create, update, and delete appSubmodules.
     */
    match /appSubmodules/{appSubmoduleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages individual transaction entries for all submodules.
     * @path /transactionEntries/{transactionEntryId}
     * @allow (create) - Any authenticated user creating a transactionEntry.
     * @deny (create) - Unauthenticated user attempting to create transactionEntry.
     * @principle Authenticated users can create, update, and delete transactionEntries.
     */
    match /transactionEntries/{transactionEntryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages role documents within the RBAC system.
     * @path /roles/{roleId}
     * @allow (create) - Any authenticated user creating a role.
     * @deny (create) - Unauthenticated user attempting to create a role.
     * @principle Authenticated users can create, update, and delete roles.
     */
    match /roles/{roleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages workflows owned by a specific user.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a workflow under /users/S1ykKeLbzZMIbc7FFphZVisaXVA2/workflows/{workflowId}
     * @deny (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a workflow under /users/otherUserId/workflows/{workflowId}
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workflows/{workflowId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages workflow steps belonging to a specific workflow.
     * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @allow (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a workflowStep under /users/S1ykKeLbzZMIbc7FFphZVisaXVA2/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @deny (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a workflowStep under /users/otherUserId/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages form definitions owned by a specific user.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}
     * @allow (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a formDefinition under /users/S1ykKeLbzZMIbc7FFphZVisaXVA2/formDefinitions/{formDefinitionId}
     * @deny (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a formDefinition under /users/otherUserId/formDefinitions/{formDefinitionId}
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages form fields belonging to a specific form definition.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @allow (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a formField under /users/S1ykKeLbzZMIbc7FFphZVisaXVA2/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @deny (create) - User S1ykKeLbzZMIbc7FFphZVisaXVA2 creating a formField under /users/otherUserId/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages lookup tables.
     * @path /lookupTables/{lookupTableId}
     * @allow (create) - Any authenticated user creating a lookupTable.
     * @deny (create) - Unauthenticated user attempting to create a lookupTable.
     * @principle Authenticated users can create, update, and delete lookupTables.
     */
    match /lookupTables/{lookupTableId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages MIS reports.
     * @path /misReports/{misReportId}
     * @allow (create) - Any authenticated user creating an MISReport.
     * @deny (create) - Unauthenticated user attempting to create an MISReport.
     * @principle Authenticated users can create, update, and delete MISReports.
     */
    match /misReports/{misReportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages transaction codes.
     * @path /transactionCodes/{transactionCodeId}
     * @allow (create) - Any authenticated user creating a transactionCode.
     * @deny (create) - Unauthenticated user attempting to create a transactionCode.
     * @principle Authenticated users can create, update, and delete transactionCodes.
     */
    match /transactionCodes/{transactionCodeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages product documents.
     * @path /products/{productId}
     * @allow (create) - Any authenticated user creating a product.
     * @deny (create) - Unauthenticated user attempting to create a product.
     * @principle Authenticated users can create, update, and delete products.
     */
    match /products/{productId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages product categories.
     * @path /categories/{categoryId}
     * @allow (create) - Any authenticated user creating a category.
     * @deny (create) - Unauthenticated user attempting to create a category.
     * @principle Authenticated users can create, update, and delete categories.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages stock level entries.
     * @path /stocks/{stockId}
     * @allow (create) - Any authenticated user creating a stock.
     * @deny (create) - Unauthenticated user attempting to create a stock.
     * @principle Authenticated users can create, update, and delete stocks.
     */
    match /stocks/{stockId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages customer documents.
     * @path /customers/{customerId}
     * @allow (create) - Any authenticated user creating a customer.
     * @deny (create) - Unauthenticated user attempting to create a customer.
     * @principle Authenticated users can create, update, and delete customers.
     */
    match /customers/{customerId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages order documents.
     * @path /orders/{orderId}
     * @allow (create) - Any authenticated user creating an order.
     * @deny (create) - Unauthenticated user attempting to create an order.
     * @principle Authenticated users can create, update, and delete orders.
     */
    match /orders/{orderId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages order line items for a specific order.
     * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
     * @allow (create) - Any authenticated user creating an orderLineItem under an order.
     * @deny (create) - Unauthenticated user attempting to create an orderLineItem.
     * @principle Authenticated users can create, update, and delete orderLineItems.
     */
    match /orders/{orderId}/orderLineItems/{orderLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages invoice documents.
     * @path /invoices/{invoiceId}
     * @allow (create) - Any authenticated user creating an invoice.
     * @deny (create) - Unauthenticated user attempting to create an invoice.
     * @principle Authenticated users can create, update, and delete invoices.
     */
    match /invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages return documents.
     * @path /returns/{returnId}
     * @allow (create) - Any authenticated user creating a return.
     * @deny (create) - Unauthenticated user attempting to create a return.
     * @principle Authenticated users can create, update, and delete returns.
     */
    match /returns/{returnId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages return line items for a specific return.
     * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
     * @allow (create) - Any authenticated user creating a returnLineItem under a return.
     * @deny (create) - Unauthenticated user attempting to create a returnLineItem.
     * @principle Authenticated users can create, update, and delete returnLineItems.
     */
    match /returns/{returnId}/returnLineItems/{returnLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (create) - Any authenticated user creating a supplier.
     * @deny (create) - Unauthenticated user attempting to create a supplier.
     * @principle Authenticated users can create, update, and delete suppliers.
     */
    match /suppliers/{supplierId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages purchase order documents.
     * @path /purchaseOrders/{purchaseOrderId}
     * @allow (create) - Any authenticated user creating a purchaseOrder.
     * @deny (create) - Unauthenticated user attempting to create a purchaseOrder.
     * @principle Authenticated users can create, update, and delete purchaseOrders.
     */
    match /purchaseOrders/{purchaseOrderId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages purchase order line items for a specific purchase order.
     * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
     * @allow (create) - Any authenticated user creating a poLineItem under a purchaseOrder.
     * @deny (create) - Unauthenticated user attempting to create a poLineItem.
     * @principle Authenticated users can create, update, and delete poLineItems.
     */
    match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages goods receipt note documents.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}
     * @allow (create) - Any authenticated user creating a goodsReceiptNote.
     * @deny (create) - Unauthenticated user attempting to create a goodsReceiptNote.
     * @principle Authenticated users can create, update, and delete goodsReceiptNotes.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages goods receipt note line items for a specific goods receipt note.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
     * @allow (create) - Any authenticated user creating a grnLineItem under a goodsReceiptNote.
     * @deny (create) - Unauthenticated user attempting to create a grnLineItem.
     * @principle Authenticated users can create, update, and delete grnLineItems.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages payment documents.
     * @path /payments/{paymentId}
     * @allow (create) - Any authenticated user creating a payment.
     * @deny (create) - Unauthenticated user attempting to create a payment.
     * @principle Authenticated users can create, update, and delete payments.
     */
    match /payments/{paymentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages chart of accounts entries.
     * @path /chartOfAccounts/{chartOfAccountsId}
     * @allow (create) - Any authenticated user creating a chartOfAccounts.
     * @deny (create) - Unauthenticated user attempting to create a chartOfAccounts.
     * @principle Authenticated users can create, update, and delete chartOfAccounts.
     */
    match /chartOfAccounts/{chartOfAccountsId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages ledger entries.
     * @path /ledgerEntries/{ledgerEntryId}
     * @allow (create) - Any authenticated user creating a ledgerEntry.
     * @deny (create) - Unauthenticated user attempting to create a ledgerEntry.
     * @principle Authenticated users can create, update, and delete ledgerEntries.
     */
    match /ledgerEntries/{ledgerEntryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }
  }
}