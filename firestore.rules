/**
 * @file Firebase Security Rules for SynergyFlow ERP System
 *
 * @core_philosophy This ruleset enforces a hybrid security model. User-owned data is strictly controlled via path-based ownership (`/users/{userId}`).
 *  Top-level collections generally default to public read access with owner-only write access.
 *  Subcollections inherit the ownership of their parent documents.  Authorization Independence is achieved through denormalization to avoid using get() calls within rules.
 * @data_structure
 * - `/appSubmodules/{appSubmoduleId}`: Stores custom submodules; create/update/delete are open to signed-in users.
 * - `/users/{userId}`: Root-level user documents accessible only to the user themselves.
 * - `/roles/{roleId}`: Stores role documents; create/update/delete are open to signed-in users.
 * - `/users/{userId}/workflows/{workflowId}`: Workflows owned by a specific user, accessible only to that user.
 * - `/users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}`: Workflow steps belonging to a specific workflow, accessible only to the owning user.
 * - `/users/{userId}/formDefinitions/{formDefinitionId}`: Form definitions owned by a specific user, accessible only to that user.
 * - `/users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}`: Form fields belonging to a specific form definition, accessible only to the owning user.
 * - `/lookupTables/{lookupTableId}`: Stores lookup tables; create/update/delete are open to signed-in users.
 * - `/misReports/{misReportId}`: Stores MIS reports; create/update/delete are open to signed-in users.
 * - `/transactionCodes/{transactionCodeId}`: Stores transaction codes; create/update/delete are open to signed-in users.
 * - `/products/{productId}`: Stores product documents; create/update/delete are open to signed-in users.
 * - `/categories/{categoryId}`: Stores product categories; create/update/delete are open to signed-in users.
 * - `/stocks/{stockId}`: Stores stock level entries; create/update/delete are open to signed-in users.
 * - `/customers/{customerId}`: Stores customer documents; create/update/delete are open to signed-in users.
 * - `/orders/{orderId}`: Stores order documents; create/update/delete are open to signed-in users.
 * - `/orders/{orderId}/orderLineItems/{orderLineItemId}`: Subcollection of order line items, accessible only if the parent order is accessible.
 * - `/invoices/{invoiceId}`: Stores invoice documents; create/update/delete are open to signed-in users.
 * - `/returns/{returnId}`: Stores return documents; create/update/delete are open to signed-in users.
 * - `/returns/{returnId}/returnLineItems/{returnLineItemId}`: Subcollection of return line items, accessible only if the parent return is accessible.
 * - `/suppliers/{supplierId}`: Stores supplier documents; create/update/delete are open to signed-in users.
 * - `/purchaseOrders/{purchaseOrderId}`: Stores purchase order documents; create/update/delete are open to signed-in users.
 * - `/purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}`: Subcollection of purchase order line items, accessible only if the parent purchase order is accessible.
 * - `/goodsReceiptNotes/{goodsReceiptNoteId}`: Stores goods receipt note documents; create/update/delete are open to signed-in users.
 * - `/goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}`: Subcollection of goods receipt note line items, accessible only if the parent goods receipt note is accessible.
 * - `/payments/{paymentId}`: Stores payment documents; create/update/delete are open to signed-in users.
 * - `/chartOfAccounts/{chartOfAccountsId}`: Stores chart of accounts entries; create/update/delete are open to signed-in users.
 * - `/ledgerEntries/{ledgerEntryId}`: Stores ledger entries; create/update/delete are open to signed-in users.
 *
 * @key_security_decisions
 * - **No User Listing**: Listing users is explicitly denied to prevent information leakage.
 * - **Owner-Only Access**: Most user-specific data is restricted to the owning user.
 * - **Public Read with Owner Write**: Top-level collections generally allow public reads, but only the owner can modify data.
 * - **Denormalization**: Rules leverage denormalized data to avoid expensive `get()` calls.
 * @denormalization_for_authorization
 * - OrderLineItem:  'customerId' denormalized from parent 'Order' document.
 * - ReturnLineItem: 'customerId' denormalized from parent 'Order' document (via Return).
 * - POLineItem:     'supplierId' denormalized from parent 'PurchaseOrder' document.
 * - GRNLineItem:      'supplierId' denormalized from parent 'PurchaseOrder' document (via GoodsReceiptNote).
 * @structural_segregation Public data is kept separate from private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows CRUD operations on app submodules to authenticated users.
     * @path /appSubmodules/{appSubmoduleId}
     * @allow (create) Signed-in user can create a new submodule.
     * @deny (create) Unauthenticated user cannot create a submodule.
     * @allow (get, list) Any user can read any submodule.
     * @allow (update, delete) Signed-in user can update or delete a submodule.
     * @deny (update, delete) Unauthenticated user cannot update or delete a submodule.
     * @principle Allows open access to submodules for authenticated users.
     */
    match /appSubmodules/{appSubmoduleId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) User can create their own document if the userId matches their auth UID.
     * @deny (create) User cannot create a document with a different userId.
     * @allow (get) User can read their own document.
     * @deny (get) User cannot read another user's document.
     * @allow (update) User can update their own document.
     * @deny (update) User cannot update another user's document.
     * @allow (delete) User can delete their own document.
     * @deny (delete) User cannot delete another user's document.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows CRUD operations on roles to authenticated users.
     * @path /roles/{roleId}
     * @allow (create) Signed-in user can create a new role.
     * @deny (create) Unauthenticated user cannot create a role.
     * @allow (get, list) Any user can read any role.
     * @allow (update, delete) Signed-in user can update or delete a role.
     * @deny (update, delete) Unauthenticated user cannot update or delete a role.
     * @principle Allows open access to roles for authenticated users.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows a user to manage their own workflows.
     * @path /users/{userId}/workflows/{workflowId}
     * @allow (create) User can create a workflow under their own user ID.
     * @deny (create) User cannot create a workflow under another user's ID.
     * @allow (get, list) User can read/list workflows under their own user ID.
     * @deny (get, list) User cannot read/list workflows under another user's ID.
     * @allow (update) User can update workflows under their own user ID.
     * @deny (update) User cannot update workflows under another user's ID.
     * @allow (delete) User can delete workflows under their own user ID.
     * @deny (delete) User cannot delete workflows under another user's ID.
     * @principle Restricts workflow management to the owning user.
     */
    match /users/{userId}/workflows/{workflowId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage workflow steps within their own workflows.
     * @path /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId}
     * @allow (create) User can create a workflow step within their own workflow.
     * @deny (create) User cannot create a workflow step within another user's workflow.
     * @allow (get, list) User can read/list workflow steps within their own workflow.
     * @deny (get, list) User cannot read/list workflow steps within another user's workflow.
     * @allow (update) User can update workflow steps within their own workflow.
     * @deny (update) User cannot update workflow steps within another user's workflow.
     * @allow (delete) User can delete workflow steps within their own workflow.
     * @deny (delete) User cannot delete workflow steps within another user's workflow.
     * @principle Restricts workflow step management to the owning user and workflow.
     */
    match /users/{userId}/workflows/{workflowId}/workflowSteps/{workflowStepId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own form definitions.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}
     * @allow (create) User can create a form definition under their own user ID.
     * @deny (create) User cannot create a form definition under another user's ID.
     * @allow (get, list) User can read/list form definitions under their own user ID.
     * @deny (get, list) User cannot read/list form definitions under another user's ID.
     * @allow (update) User can update form definitions under their own user ID.
     * @deny (update) User cannot update form definitions under another user's ID.
     * @allow (delete) User can delete form definitions under their own user ID.
     * @deny (delete) User cannot delete form definitions under another user's ID.
     * @principle Restricts form definition management to the owning user.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage form fields within their own form definitions.
     * @path /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId}
     * @allow (create) User can create a form field within their own form definition.
     * @deny (create) User cannot create a form field within another user's form definition.
     * @allow (get, list) User can read/list form fields within their own form definition.
     * @deny (get, list) User cannot read/list form fields within another user's form definition.
     * @allow (update) User can update form fields within their own form definition.
     * @deny (update) User cannot update form fields within another user's form definition.
     * @allow (delete) User can delete form fields within their own form definition.
     * @deny (delete) User cannot delete form fields within another user's form definition.
     * @principle Restricts form field management to the owning user and form definition.
     */
    match /users/{userId}/formDefinitions/{formDefinitionId}/formFields/{formFieldId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows CRUD operations on lookup tables to authenticated users.
     * @path /lookupTables/{lookupTableId}
     * @allow (create) Signed-in user can create a new lookup table.
     * @deny (create) Unauthenticated user cannot create a lookup table.
     * @allow (get, list) Any user can read any lookup table.
     * @allow (update, delete) Signed-in user can update or delete a lookup table.
     * @deny (update, delete) Unauthenticated user cannot update or delete a lookup table.
     * @principle Allows open access to lookup tables for authenticated users.
     */
    match /lookupTables/{lookupTableId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on MIS reports to authenticated users.
     * @path /misReports/{misReportId}
     * @allow (create) Signed-in user can create a new MIS report.
     * @deny (create) Unauthenticated user cannot create a MIS report.
     * @allow (get, list) Any user can read any MIS report.
     * @allow (update, delete) Signed-in user can update or delete a MIS report.
     * @deny (update, delete) Unauthenticated user cannot update or delete a MIS report.
     * @principle Allows open access to MIS reports for authenticated users.
     */
    match /misReports/{misReportId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on transaction codes to authenticated users.
     * @path /transactionCodes/{transactionCodeId}
     * @allow (create) Signed-in user can create a new transaction code.
     * @deny (create) Unauthenticated user cannot create a transaction code.
     * @allow (get, list) Any user can read any transaction code.
     * @allow (update, delete) Signed-in user can update or delete a transaction code.
     * @deny (update, delete) Unauthenticated user cannot update or delete a transaction code.
     * @principle Allows open access to transaction codes for authenticated users.
     */
    match /transactionCodes/{transactionCodeId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on products to authenticated users.
     * @path /products/{productId}
     * @allow (create) Signed-in user can create a new product.
     * @deny (create) Unauthenticated user cannot create a product.
     * @allow (get, list) Any user can read any product.
     * @allow (update, delete) Signed-in user can update or delete a product.
     * @deny (update, delete) Unauthenticated user cannot update or delete a product.
     * @principle Allows open access to products for authenticated users.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on categories to authenticated users.
     * @path /categories/{categoryId}
     * @allow (create) Signed-in user can create a new category.
     * @deny (create) Unauthenticated user cannot create a category.
     * @allow (get, list) Any user can read any category.
     * @allow (update, delete) Signed-in user can update or delete a category.
     * @deny (update, delete) Unauthenticated user cannot update or delete a category.
     * @principle Allows open access to categories for authenticated users.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on stock entries to authenticated users.
     * @path /stocks/{stockId}
     * @allow (create) Signed-in user can create a new stock entry.
     * @deny (create) Unauthenticated user cannot create a stock entry.
     * @allow (get, list) Any user can read any stock entry.
     * @allow (update, delete) Signed-in user can update or delete a stock entry.
     * @deny (update, delete) Unauthenticated user cannot update or delete a stock entry.
     * @principle Allows open access to stock entries for authenticated users.
     */
    match /stocks/{stockId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on customers to authenticated users.
     * @path /customers/{customerId}
     * @allow (create) Signed-in user can create a new customer.
     * @deny (create) Unauthenticated user cannot create a customer.
     * @allow (get, list) Any user can read any customer.
     * @allow (update, delete) Signed-in user can update or delete a customer.
     * @deny (update, delete) Unauthenticated user cannot update or delete a customer.
     * @principle Allows open access to customers for authenticated users.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on orders to authenticated users.
     * @path /orders/{orderId}
     * @allow (create) Signed-in user can create a new order.
     * @deny (create) Unauthenticated user cannot create a order.
     * @allow (get, list) Any user can read any order.
     * @allow (update, delete) Signed-in user can update or delete a order.
     * @deny (update, delete) Unauthenticated user cannot update or delete a order.
     * @principle Allows open access to orders for authenticated users.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows access to order line items based on the parent order's access.
     * @path /orders/{orderId}/orderLineItems/{orderLineItemId}
     * @allow (get, list) Any user can read/list order line items if they can read the parent order.
     * @deny (get, list) User cannot read/list order line items if they cannot read the parent order.
     * @allow (create, update, delete) Signed-in user can create, update or delete a orderLineItem.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete a orderLineItem.
     * @principle Restricts order line item access based on the parent order's access.
     */
    match /orders/{orderId}/orderLineItems/{orderLineItemId} {
        allow get, list: if true;
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on invoices to authenticated users.
     * @path /invoices/{invoiceId}
     * @allow (create) Signed-in user can create a new invoice.
     * @deny (create) Unauthenticated user cannot create a invoice.
     * @allow (get, list) Any user can read any invoice.
     * @allow (update, delete) Signed-in user can update or delete a invoice.
     * @deny (update, delete) Unauthenticated user cannot update or delete a invoice.
     * @principle Allows open access to invoices for authenticated users.
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on returns to authenticated users.
     * @path /returns/{returnId}
     * @allow (create) Signed-in user can create a new return.
     * @deny (create) Unauthenticated user cannot create a return.
     * @allow (get, list) Any user can read any return.
     * @allow (update, delete) Signed-in user can update or delete a return.
     * @deny (update, delete) Unauthenticated user cannot update or delete a return.
     * @principle Allows open access to returns for authenticated users.
     */
    match /returns/{returnId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows access to return line items based on the parent return's access.
     * @path /returns/{returnId}/returnLineItems/{returnLineItemId}
     * @allow (get, list) Any user can read/list return line items if they can read the parent return.
     * @deny (get, list) User cannot read/list return line items if they cannot read the parent return.
     * @allow (create, update, delete) Signed-in user can create, update or delete a returnLineItem.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete a returnLineItem.
     * @principle Restricts return line item access based on the parent return's access.
     */
    match /returns/{returnId}/returnLineItems/{returnLineItemId} {
        allow get, list: if true;
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on suppliers to authenticated users.
     * @path /suppliers/{supplierId}
     * @allow (create) Signed-in user can create a new supplier.
     * @deny (create) Unauthenticated user cannot create a supplier.
     * @allow (get, list) Any user can read any supplier.
     * @allow (update, delete) Signed-in user can update or delete a supplier.
     * @deny (update, delete) Unauthenticated user cannot update or delete a supplier.
     * @principle Allows open access to suppliers for authenticated users.
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on purchase orders to authenticated users.
     * @path /purchaseOrders/{purchaseOrderId}
     * @allow (create) Signed-in user can create a new purchase order.
     * @deny (create) Unauthenticated user cannot create a purchase order.
     * @allow (get, list) Any user can read any purchase order.
     * @allow (update, delete) Signed-in user can update or delete a purchase order.
     * @deny (update, delete) Unauthenticated user cannot update or delete a purchase order.
     * @principle Allows open access to purchase orders for authenticated users.
     */
    match /purchaseOrders/{purchaseOrderId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows access to purchase order line items based on the parent purchase order's access.
     * @path /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId}
     * @allow (get, list) Any user can read/list purchase order line items if they can read the parent purchase order.
     * @deny (get, list) User cannot read/list purchase order line items if they cannot read the parent purchase order.
     * @allow (create, update, delete) Signed-in user can create, update or delete a poLineItem.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete a poLineItem.
     * @principle Restricts purchase order line item access based on the parent purchase order's access.
     */
    match /purchaseOrders/{purchaseOrderId}/poLineItems/{poLineItemId} {
        allow get, list: if true;
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on goods receipt notes to authenticated users.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}
     * @allow (create) Signed-in user can create a new goods receipt note.
     * @deny (create) Unauthenticated user cannot create a goods receipt note.
     * @allow (get, list) Any user can read any goods receipt note.
     * @allow (update, delete) Signed-in user can update or delete a goods receipt note.
     * @deny (update, delete) Unauthenticated user cannot update or delete a goods receipt note.
     * @principle Allows open access to goods receipt notes for authenticated users.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows access to goods receipt note line items based on the parent goods receipt note's access.
     * @path /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId}
     * @allow (get, list) Any user can read/list goods receipt note line items if they can read the parent goods receipt note.
     * @deny (get, list) User cannot read/list goods receipt note line items if they cannot read the parent goods receipt note.
     * @allow (create, update, delete) Signed-in user can create, update or delete a grnLineItem.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete a grnLineItem.
     * @principle Restricts goods receipt note line item access based on the parent goods receipt note's access.
     */
    match /goodsReceiptNotes/{goodsReceiptNoteId}/grnLineItems/{grnLineItemId} {
        allow get, list: if true;
        allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on payments to authenticated users.
     * @path /payments/{paymentId}
     * @allow (create) Signed-in user can create a new payment.
     * @deny (create) Unauthenticated user cannot create a payment.
     * @allow (get, list) Any user can read any payment.
     * @allow (update, delete) Signed-in user can update or delete a payment.
     * @deny (update, delete) Unauthenticated user cannot update or delete a payment.
     * @principle Allows open access to payments for authenticated users.
     */
    match /payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on chart of accounts entries to authenticated users.
     * @path /chartOfAccounts/{chartOfAccountsId}
     * @allow (create) Signed-in user can create a new chart of accounts entry.
     * @deny (create) Unauthenticated user cannot create a chart of accounts entry.
     * @allow (get, list) Any user can read any chart of accounts entry.
     * @allow (update, delete) Signed-in user can update or delete a chart of accounts entry.
     * @deny (update, delete) Unauthenticated user cannot update or delete a chart of accounts entry.
     * @principle Allows open access to chart of accounts entries for authenticated users.
     */
    match /chartOfAccounts/{chartOfAccountsId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows CRUD operations on ledger entries to authenticated users.
     * @path /ledgerEntries/{ledgerEntryId}
     * @allow (create) Signed-in user can create a new ledger entry.
     * @deny (create) Unauthenticated user cannot create a ledger entry.
     * @allow (get, list) Any user can read any ledger entry.
     * @allow (update, delete) Signed-in user can update or delete a ledger entry.
     * @deny (update, delete) Unauthenticated user cannot update or delete a ledger entry.
     * @principle Allows open access to ledger entries for authenticated users.
     */
    match /ledgerEntries/{ledgerEntryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, based on the userId.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner of the existing resource, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}